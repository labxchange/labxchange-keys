.DEFAULT_GOAL := help

.PHONY: clean quality requirements test validate

help:
	@echo "Please use \`make <target>' where <target> is one of"
	@echo "  clean                      delete generated byte code and coverage reports"
	@echo "  requirements               install requirements for local development"
	@echo "  upgrade                    updates requirements files"
	@echo "  test                       run tests and generate coverage report"
	@echo "  quality                    run PEP8 and Pylint"
	@echo "  validate                   run tests and quality checks"
	@echo "  html_coverage              generate and view HTML coverage report"
	@echo ""
	@echo "  help                       display this help message"
	@echo ""

PROJECT_ROOT := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
SRC_DIR := ./labxchange_keys

clean: ## remove generated byte code, coverage reports, and build artifacts
	find $(PROJECT_ROOT) -name '__pycache__' -exec rm -rf {} +
	find $(PROJECT_ROOT) -name '*.pyc' -exec rm -f {} +
	find $(PROJECT_ROOT) -name '*.pyo' -exec rm -f {} +
	find $(PROJECT_ROOT) -name '*~' -exec rm -f {} +
	cd $(PROJECT_ROOT) && coverage erase
	rm -fr $(PROJECT_ROOT)build/
	rm -fr $(PROJECT_ROOT)dist/
	# Do not delete the .egg-info because it will uninstall the entry point
	# and thus unregister the plugin.
	# rm -fr $(PROJECT_ROOT)*.egg-info

coverage: clean ## generate and view HTML coverage report
	pytest --cov-report html
	$(BROWSER) htmlcov/index.html

quality: format-check
	pylint $(SRC_DIR)
	pycodestyle $(PROJECT_ROOT)$(SRC_DIR)
	isort --check-only --diff $(PROJECT_ROOT)$(SRC_DIR)

format-check:
	black --version
	black --check ${SRC_DIR}
	isort --version
	isort --check-only ${SRC_DIR}

format:
	black --version
	black ${SRC_DIR}
	isort --version
	isort ${SRC_DIR}

requirements:
	pip install --upgrade pip==21.3.1
	pip install -r requirements/local.txt --exists-action w

upgrade:
	pip-compile requirements/base.in
	pip-compile requirements/test.in

# test target:
test: clean
	pytest --cov=$(SRC_DIR)
	coverage html
	coverage xml --fail-under=78 || echo "ERROR: Total coverage is under 77"
	diff-cover coverage.xml --compare-branch=origin/main --fail-under=90 --html-report diff-cover.html

diff_cover: test ## find diff lines that need test coverage
	diff-cover coverage.xml

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."
